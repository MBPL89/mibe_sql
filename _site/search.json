[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MIBE SQL Corner",
    "section": "",
    "text": "Welcome to the MIBE SQL Corner! This page is dedicated to all the key concepts, notes, and resources you need for mastering SQL in the Coding and Data Management course. Whether you‚Äôre just starting or refining your skills, you‚Äôll find everything you need to excel in SQL here. Let‚Äôs dive in and sharpen those coding skills!\nYou will also use this website to query databases. It features interactive fields, where you can type and edit your SQL queries.\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "1-single-entity.html#the-relational-model",
    "href": "1-single-entity.html#the-relational-model",
    "title": "Introduction to SQL. Single entity",
    "section": "",
    "text": "The relational model is a way of organizing data into tables (called relations).\nThe Relational Model represents data and their relationships through a collection of tables. Each table also known as a relation consists of rows and columns. Every column has a unique name and corresponds to a specific attribute, while each row contains a set of related data values representing a real-world entity or relationship.\nThe relational model represents how data is stored in Relational Databases. A relational database consists of a collection of tables each of which is assigned a unique name.\n\n\n\nRelational Model\n\n\nRelation or table: * Matrix of intersecting tuples and attributes + Tuples: Rows + Attributes: Columns"
  },
  {
    "objectID": "1-single-entity.html#single-entity",
    "href": "1-single-entity.html#single-entity",
    "title": "Introduction to SQL. Single entity",
    "section": "",
    "text": "An entity is some thing in the environment. It can be a physical entity (e.g., student) or an abstraction (e.g., marriage). You can think of an entity as a class of objects (or phenomena). An instance is a particular occurrence of an entity.\n\n\n\n\n\nNo worries! It will get easier with the examples below üòÖ\n\n\n\nEntity: ‚ÄúCar‚Äù is an entity because it represents a general category of objects that share common characteristics, such as having wheels, an engine, and the ability to transport people.\n\nInstance: A specific car, like a red 2015 Volkswagen Beetle with license plate ABC123, is an instance of the ‚ÄúCar‚Äù entity. It is a particular example with unique attributes.\n\n\n\n\n\n\n\n\n\n\nEntity: ‚ÄúTree‚Äù is an entity because it represents a general type of object that has roots, a trunk, and leaves.\n\nInstance: A specific tree in a forest, such as the 50-year-old oak tree standing near the river in Amazon Rainforest, is an instance of the ‚ÄúTree‚Äù entity. It is a unique example of the general concept.\n\n\n\n\n\n\n\n\n\nFirst, we need to draw an entity.\nRemember, an entity is:\n\nSome thing in the environment\nA physical entity (e.g., student) or an abstraction (e.g., marriage)\nAn entity is a class (or entity set)\nAn instance is a particular occurrence of an entity\n\n\n\n\n\n\n\nNote\n\n\n\nAn entity is represented by a rectangle in modelling notation\n\n\n\n\n\n\n\n\n\nAn entity\n\n\nSecond, let‚Äôs think about attributes.\nAn attribute is a discrete data element that describes an entity.\n\nAttributes must be conceptually unique\n\nHomonym: Same name is used to label different attributes\nSynonym: Different names are used to describe the same attribute\n\n\n\n\n\n\n\n\nNote\n\n\n\nAttribute names must be unique within a data model\nAttribute names should be meaningful\n\n\n\n\n\n\n\n\n\nAttributes\n\n\nThere is one more step before we have our model ready. We need to add identifiers.\nEvery instance of an entity must be uniquely identified.\nAn identifier can be an attribute or collection of attributes.\nAn identifier can be created if there is no obvious attribute (surrogate).\n\n\n\n\n\n\nNote\n\n\n\nA leading asterisk denotes an identifier in our entity.\n\n\n\n\n\n\n\n\n\nIdentifier (*)\n\n\nThat‚Äôs it! You‚Äôve created your first database model. It‚Äôs a simple one‚Äîjust a single table. But soon, we‚Äôll be designing much more complex databases, all built on these few basic steps."
  },
  {
    "objectID": "1-single-entity.html#exercise",
    "href": "1-single-entity.html#exercise",
    "title": "Introduction to SQL. Single entity",
    "section": "",
    "text": "Create a data model for recording details of the herd of cows that you manage"
  },
  {
    "objectID": "1-single-entity.html#querying-a-table",
    "href": "1-single-entity.html#querying-a-table",
    "title": "Introduction to SQL. Single entity",
    "section": "Querying a Table",
    "text": "Querying a Table\nIn SQL, the simplest way to retrieve data is by using SELECT * FROM tableName;. This command asks the database to return everything in the table. Think of it as saying, ‚ÄúHey, server, show me (SELECT) all the data (*) in this table (FROM)!‚Äù\nOf course, tableName is just a placeholder. We will have to replace it with the real name. In our case, the table is called brand.\nTry it yourself with our brand table:\n\nSELECT * FROM tableName;\n\n\n\n\n\n\n\nNote\n\n\n\nHave you noticed the small detail at the end of line? Every query has to end with ;. It tells the server that your query ends here. Everything after this sign is a new code. This will be important when we run more than one query at a time."
  },
  {
    "objectID": "1-single-entity.html#projection-choosing-columns",
    "href": "1-single-entity.html#projection-choosing-columns",
    "title": "Introduction to SQL. Single entity",
    "section": "Projection: Choosing Columns",
    "text": "Projection: Choosing Columns\nSometimes, you don‚Äôt need all the data‚Äîjust specific columns.\n\n\n\n\n\nYou can request only what you need by listing column names:\n\nSELECT brandName, brandChain FROM brand; \n\nThis is like asking, ‚ÄúTell me just the brand name and chain, please.‚Äù"
  },
  {
    "objectID": "1-single-entity.html#restriction-choosing-rows",
    "href": "1-single-entity.html#restriction-choosing-rows",
    "title": "Introduction to SQL. Single entity",
    "section": "Restriction: Choosing Rows",
    "text": "Restriction: Choosing Rows\nIf you only want certain rows, use WHERE to filter results.\n\n\n\n\n\nTry yourself and report all brands owned by Hilton Worldwide.\n\nSELECT * FROM brand \n  WHERE brandChain = 'Hilton Worldwide';\n\nThis is like telling the server, ‚ÄúOnly show me brands owned by Hilton.‚Äù\nYou can choose any other lodging chain instead of ‚ÄòHilton Worldwide‚Äô. For example, try with ‚ÄòAccor‚Äô and see how the results change.\n\n\n\n\n\n\nWarning\n\n\n\nHilton or Accor are values, not attributes. Unlike column names or table name, you always have to wrap text values with quotation marks ('...' or \"...\").\n\n\n\n\n\n\n\n\nTip\n\n\n\nFollowing the same logic, you can exclude a value from the results. You have to replace = with != or &lt;&gt; (they both mean the same thing).\n\n\nTry yourself and report all brands but Hilton Worldwide. Edit the query to try it with &lt;&gt; too.\n\nSELECT * FROM brand \n  WHERE brandChain != 'Hilton Worldwide';"
  },
  {
    "objectID": "1-single-entity.html#projection-and-restriction-together",
    "href": "1-single-entity.html#projection-and-restriction-together",
    "title": "Introduction to SQL. Single entity",
    "section": "Projection and Restriction Together",
    "text": "Projection and Restriction Together\nCombining both techniques, you can select specific columns and filter rows. List the brand name and segment of all brands owned by Hilton Worldwide:\n\nSELECT brandName, brandSegment FROM brand \n  WHERE brandChain = 'Hilton Worldwide';\n\nNow you‚Äôre asking, ‚ÄúShow me just the names and segments of Hilton brands.‚Äù"
  },
  {
    "objectID": "1-single-entity.html#primary-key-retrieval",
    "href": "1-single-entity.html#primary-key-retrieval",
    "title": "Introduction to SQL. Single entity",
    "section": "Primary Key Retrieval",
    "text": "Primary Key Retrieval\nA primary key uniquely identifies a row. If you query by it, you get at most one result:\n\nSELECT * FROM brand \n  WHERE brandID = 10;\n\nThis is like saying, ‚ÄúGive me all details about the brand with ID 10.‚Äù\nImportant Notice that numerical values do not have to be wrapped with quotation marks."
  },
  {
    "objectID": "1-single-entity.html#queries-without-primary-key",
    "href": "1-single-entity.html#queries-without-primary-key",
    "title": "Introduction to SQL. Single entity",
    "section": "Queries Without Primary Key",
    "text": "Queries Without Primary Key\nWithout a primary key, multiple rows can be returned:\n\nSELECT * FROM brand \n  WHERE brandChain = 'Accor';"
  },
  {
    "objectID": "1-single-entity.html#the-in-operator",
    "href": "1-single-entity.html#the-in-operator",
    "title": "Introduction to SQL. Single entity",
    "section": "The IN Operator",
    "text": "The IN Operator\nIf you want to filter by multiple values, IN operator will come handy:\n\nSELECT * FROM brand \n  WHERE brandSegment IN ('Luxury', 'Economy');\n\nThis is the equivalent of saying, ‚ÄúGive me brands that are either Luxury or Economy.‚Äù\nYou could get the same results by using WHERE with OR:\n\nSELECT * FROM brand \n    WHERE brandSegment = 'Luxury'\n        OR brandSegment = 'Economy';\n\nDo you see how much more efficient it is with IN?"
  },
  {
    "objectID": "1-single-entity.html#the-not-in-operator",
    "href": "1-single-entity.html#the-not-in-operator",
    "title": "Introduction to SQL. Single entity",
    "section": "The NOT IN Operator",
    "text": "The NOT IN Operator\nTo exclude more than one value, use NOT IN:\n\nSELECT * FROM brand \n  WHERE brandName NOT IN ('Sofitel', 'Thalassa', 'Curio', 'Conrad');\n\nThis means, ‚ÄúShow me everything except these brands.‚Äù"
  },
  {
    "objectID": "1-single-entity.html#ordering-columns",
    "href": "1-single-entity.html#ordering-columns",
    "title": "Introduction to SQL. Single entity",
    "section": "Ordering Columns",
    "text": "Ordering Columns\nThe order of selected columns in your query defines how results appear. This just structures the results the way you prefer.\nCompare these two queries\n\nSELECT brandName, brandSegment FROM brand WHERE brandChain = 'Accor';\n\n\nSELECT brandSegment, brandName FROM brand WHERE brandChain = 'Accor';"
  },
  {
    "objectID": "1-single-entity.html#ordering-rows",
    "href": "1-single-entity.html#ordering-rows",
    "title": "Introduction to SQL. Single entity",
    "section": "Ordering Rows",
    "text": "Ordering Rows\nIf you need to sort the results, you can use ORDER BY.\n\n\n\n\n\nList all brands with rooms smaller than 350 square feet with largest first:\n\nSELECT * FROM brand WHERE brandMinSqFt &lt; 350 ORDER BY brandMinSqFt DESC;\n\nThis means, ‚ÄúShow me brands with rooms under 350 sqft, biggest first, and if sizes match, sort alphabetically.‚Äù\n\n\n\n\n\n\nTip\n\n\n\nDESC means descending order (biggest first). If you need ascending order (smallest first), you can replace it with ASC or simply remove it (ascending order is default in SQL).\n\n\n\n\n\n\n\n\nNote\n\n\n\nHave you noticed that there are many brands with the same value? We can order results by two columns. If the results in the first column are identical, the second column will be used to sort them. Let‚Äôs add brandName to our ORDER BY clause.\n\n\nList all brands with rooms smaller than 350 square feet with largest first. Where areas are identical, list brands in alphabetical order.\n\nSELECT * FROM brand WHERE brandMinSqFt &lt; 350 ORDER BY brandMinSqFt DESC, brandName;\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that our results are ordered by brandMinSqFt in descending order (DESC), and alphabetically by brandName (you can add ASC after brandName to get the same results).\n\n\n\n\n\n\n\n\nTip\n\n\n\nLast one more thing. Notice that we use &lt; in this query. WHERE condition can take all the comparison operators: =, !=, &lt;, &gt;, &lt;=, and &gt;=."
  },
  {
    "objectID": "1-single-entity.html#calculated-fields",
    "href": "1-single-entity.html#calculated-fields",
    "title": "Introduction to SQL. Single entity",
    "section": "Calculated Fields",
    "text": "Calculated Fields\nSQL allows calculations directly in queries. Let‚Äôs say we want to convert square feet to square meters in the results (m¬≤ = f¬≤ / 10.764).\n\nSELECT brandName, brandMinSqFt / 10.764 FROM brand;"
  },
  {
    "objectID": "1-single-entity.html#renaming-output-fields",
    "href": "1-single-entity.html#renaming-output-fields",
    "title": "Introduction to SQL. Single entity",
    "section": "Renaming Output Fields",
    "text": "Renaming Output Fields\nThe column name for our calculated field in the results above doesn‚Äôt look nice. To make results clearer, use AS to rename calculated fields (or any other column in your query).\nGet minimum room area in square meters for each brand. Rename the output\n\nSELECT brandName, brandMinSqFt / 10.764 AS brandSqMt FROM brand;\n\nNow the result column will be labeled brandSqMt instead of an anonymous calculation. This new name is called alias.\n\nThat‚Äôs it for now! üéâ\nEven if it seems like just a little, learning this is already a great achievement!\n\n\n\n\n\n\nRemember, SQL is like having a conversation in English with the database:\n\n‚ÄúShow me everything‚Äù ‚Üí SELECT * FROM table;\n\n‚ÄúGive me only what I need‚Äù ‚Üí SELECT column FROM table;\n\n‚ÄúFilter the results‚Äù ‚Üí WHERE = condition\n\n‚ÄúSort them‚Äù ‚Üí ORDER BY column\n\nWith these basics, you‚Äôre already on your way to mastering SQL!\n\n\n\n\n\n\n\n\n\nImages and GIFs Disclaimer: Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "1-single-entity.html",
    "href": "1-single-entity.html",
    "title": "Introduction to SQL. Single entity",
    "section": "",
    "text": "Database Model is the logical representation of the structure of the data.\n\n\n\nDatabase Model Example\n\n\nIn general, there are two types of database models:\n\nConceptual Data Model\n\nThe logical representation of the structure of the data (conceptual metadata)\nUsing a specific modelling notation (e.g., ER diagramming, crow-foot notation, UML)\n\n\n\n\n\n\n\n\n\n\nHand-drawn crowfoot model\n\n\n\n\n\n\n\nER diagram\n\n\n\n\n\n\nFigure¬†1\n\n\n\n\nImplementable Data Model\n\nProduced in specialized software\nReady to launch on a server\nConceptual design\nData dictionary\n\n\n\n\n\nImplementable Model\n\n\nModelling is Designing\nA database must model the real world\n\nTo model means:\n\nTo represent faithfully\nGiven the database design objectives\nWithin scope and under given constraints\n\n\nObjective: Storing and retrieving data about the real world\nData modelling is a design technique for capturing data reality\n\n\nThe relational model is a way of organizing data into tables (called relations).\nThe Relational Model represents data and their relationships through a collection of tables. Each table also known as a relation consists of rows and columns. Every column has a unique name and corresponds to a specific attribute, while each row contains a set of related data values representing a real-world entity or relationship.\nThe relational model represents how data is stored in Relational Databases. A relational database consists of a collection of tables each of which is assigned a unique name.\n\n\n\nRelational Model\n\n\nRelation or table: * Matrix of intersecting tuples and attributes + Tuples: Rows + Attributes: Columns\n\n\n\nAn entity is some thing in the environment. It can be a physical entity (e.g., student) or an abstraction (e.g., marriage). You can think of an entity as a class of objects (or phenomena). An instance is a particular occurrence of an entity.\n\n\n\n\n\nNo worries! It will get easier with the examples below üòÖ\n\n\n\nEntity: ‚ÄúCar‚Äù is an entity because it represents a general category of objects that share common characteristics, such as having wheels, an engine, and the ability to transport people.\n\nInstance: A specific car, like a red 2015 Volkswagen Beetle with license plate ABC123, is an instance of the ‚ÄúCar‚Äù entity. It is a particular example with unique attributes.\n\n\n\n\n\n\n\n\n\n\nEntity: ‚ÄúTree‚Äù is an entity because it represents a general type of object that has roots, a trunk, and leaves.\n\nInstance: A specific tree in a forest, such as the 50-year-old oak tree standing near the river in Amazon Rainforest, is an instance of the ‚ÄúTree‚Äù entity. It is a unique example of the general concept.\n\n\n\n\n\n\n\n\n\nFirst, we need to draw an entity.\nRemember, an entity is:\n\nSome thing in the environment\nA physical entity (e.g., student) or an abstraction (e.g., marriage)\nAn entity is a class (or entity set)\nAn instance is a particular occurrence of an entity\n\n\n\n\n\n\n\nNote\n\n\n\nAn entity is represented by a rectangle in modelling notation\n\n\n\n\n\n\n\n\n\nAn entity\n\n\nSecond, let‚Äôs think about attributes.\nAn attribute is a discrete data element that describes an entity.\n\nAttributes must be conceptually unique\n\nHomonym: Same name is used to label different attributes\nSynonym: Different names are used to describe the same attribute\n\n\n\n\n\n\n\n\nNote\n\n\n\nAttribute names must be unique within a data model\nAttribute names should be meaningful\n\n\n\n\n\n\n\n\n\nAttributes\n\n\nThere is one more step before we have our model ready. We need to add identifiers.\nEvery instance of an entity must be uniquely identified.\nAn identifier can be an attribute or collection of attributes.\nAn identifier can be created if there is no obvious attribute (surrogate).\n\n\n\n\n\n\nNote\n\n\n\nA leading asterisk denotes an identifier in our entity.\n\n\n\n\n\n\n\n\n\nIdentifier (*)\n\n\nThat‚Äôs it! You‚Äôve created your first database model. It‚Äôs a simple one‚Äîjust a single table. But soon, we‚Äôll be designing much more complex databases, all built on these few basic steps.\n\n\n\n\nCreate a data model for recording details of the herd of cows that you manage"
  },
  {
    "objectID": "Homework1.html",
    "href": "Homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "The following queries use the classicmodels schema. All queries use the products table.\n\n\n\n\n\n\n\nPrepare a list of products sorted by product name in descending order.\n\n\n\nList the product names and their quantity available from high to low?\n\n\n\nReport the MSRP for the products in ‚ÄúVintage Cars‚Äù category?\n\n\n\nReport the product(s) with the buy price of 48.81.\n\n\n\nReport those products with the price greater than 70.\n\n\n\nWhich products have product scale ratio 1:10 and 1:72?\n\n\n\nList the product names except the ones in the Planes and Ships category.\n\n\n\nReport the names of products excluding Motorcycles and Classic Cars.\n\n\n\nReport the products having MSRP greater than 110.\n\n\n\nList the product vendors in ascending alphabetical order.\n\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Homework1.html#sql---homework-1",
    "href": "Homework1.html#sql---homework-1",
    "title": "Homework 1",
    "section": "",
    "text": "The following queries use the classicmodels schema. All queries use the products table.\n\n\n\n\n\n\n\nPrepare a list of products sorted by product name in descending order.\n\n\n\nList the product names and their quantity available from high to low?\n\n\n\nReport the MSRP for the products in ‚ÄúVintage Cars‚Äù category?\n\n\n\nReport the product(s) with the buy price of 48.81.\n\n\n\nReport those products with the price greater than 70.\n\n\n\nWhich products have product scale ratio 1:10 and 1:72?\n\n\n\nList the product names except the ones in the Planes and Ships category.\n\n\n\nReport the names of products excluding Motorcycles and Classic Cars.\n\n\n\nReport the products having MSRP greater than 110.\n\n\n\nList the product vendors in ascending alphabetical order.\n\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "scavenger_hunt.html",
    "href": "scavenger_hunt.html",
    "title": "Murder in SQLCity",
    "section": "",
    "text": "SELECT \n    name\nFROM \n    sqlite_schema\nWHERE \n    type ='table' AND \n    name NOT LIKE 'sqlite_%';"
  },
  {
    "objectID": "scavenger_hunt.html#test",
    "href": "scavenger_hunt.html#test",
    "title": "Murder in SQLCity",
    "section": "",
    "text": "SELECT \n    name\nFROM \n    sqlite_schema\nWHERE \n    type ='table' AND \n    name NOT LIKE 'sqlite_%';"
  },
  {
    "objectID": "Homework2.html",
    "href": "Homework2.html",
    "title": "Homework2",
    "section": "",
    "text": "The following queries use the classicmodels schema.\n\n\n\nSource: https://www.richardtwatson.com/\n\n\n\nReport product number, product name of products sold by order date. Order results by date (descending) and product code (ascending). Use both the USING and ON syntax for the join. Observe their different behavior.\n\n\n\nList all the order number and status for all the orders containing the 1940 Ford Pickup Truck.\n\n\n\nList the names of customers and the corresponding order numbers for those orders from that customer that have a total value greater than $25,000? Total value is obtained by adding the price times quantity sold of all products in the order.\n\n\n\nAre there any products that appear on all orders? If so, list their product code and the total number of orders they appear in. Rename the columns as ‚ÄòTotal Orders‚Äô.\n\n\n\nReport those orders containing products sold at a discount (i.e., sold at a price less than the product‚Äôs MSRP). For these orders report the order number, the product code of the items sold at discount and both the price and the MSRP.\n\n\n\nRepeat the above query but only return the order number for the orders containing products sold at a discount.\n\n\n\nReport those products that have been sold with a markup of 100% or more (i.e., the priceEach is at least twice the buyPrice) on at least one sale. Provide the product code, the price at which it sold, the buy price and the MSRP. Be sure not to duplicate output unnecessarily.\n\n\n\nWhat is the total quantity on hand for products listed in orders with staus: ‚ÄòOn Hold‚Äô? Rename the quantity ordered as ‚ÄòTotal Ordered‚Äô and the quantity in stock as ‚ÄòTotal on Hand‚Äô. Use the ON syntax for the JOIN.\n\n\n\nReport product code, name and MSRP for all products that have not sold any units.\n\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Homework2.html#sql---homework-2",
    "href": "Homework2.html#sql---homework-2",
    "title": "Homework2",
    "section": "",
    "text": "The following queries use the classicmodels schema.\n\n\n\nSource: https://www.richardtwatson.com/\n\n\n\nReport product number, product name of products sold by order date. Order results by date (descending) and product code (ascending). Use both the USING and ON syntax for the join. Observe their different behavior.\n\n\n\nList all the order number and status for all the orders containing the 1940 Ford Pickup Truck.\n\n\n\nList the names of customers and the corresponding order numbers for those orders from that customer that have a total value greater than $25,000? Total value is obtained by adding the price times quantity sold of all products in the order.\n\n\n\nAre there any products that appear on all orders? If so, list their product code and the total number of orders they appear in. Rename the columns as ‚ÄòTotal Orders‚Äô.\n\n\n\nReport those orders containing products sold at a discount (i.e., sold at a price less than the product‚Äôs MSRP). For these orders report the order number, the product code of the items sold at discount and both the price and the MSRP.\n\n\n\nRepeat the above query but only return the order number for the orders containing products sold at a discount.\n\n\n\nReport those products that have been sold with a markup of 100% or more (i.e., the priceEach is at least twice the buyPrice) on at least one sale. Provide the product code, the price at which it sold, the buy price and the MSRP. Be sure not to duplicate output unnecessarily.\n\n\n\nWhat is the total quantity on hand for products listed in orders with staus: ‚ÄòOn Hold‚Äô? Rename the quantity ordered as ‚ÄòTotal Ordered‚Äô and the quantity in stock as ‚ÄòTotal on Hand‚Äô. Use the ON syntax for the JOIN.\n\n\n\nReport product code, name and MSRP for all products that have not sold any units.\n\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Readings.html",
    "href": "Readings.html",
    "title": "Readings",
    "section": "",
    "text": "Richard Watson Data Management: Databases and Organizations 6th Edition Prospect Press\nAvailable in the Department‚Äôs library and at\nData Management, Databases, and Analytics\n\n\n\n\n\n\n\n\n\n\n\n\nCoronel C. and Morris S. Database Systems: Design, Implementation and Management\n12th Edition, Cengage Learning.\nAvailable in the Department‚Äôs library.\n\n\n\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Readings.html#readings",
    "href": "Readings.html#readings",
    "title": "Readings",
    "section": "",
    "text": "Richard Watson Data Management: Databases and Organizations 6th Edition Prospect Press\nAvailable in the Department‚Äôs library and at\nData Management, Databases, and Analytics\n\n\n\n\n\n\n\n\n\n\n\n\nCoronel C. and Morris S. Database Systems: Design, Implementation and Management\n12th Edition, Cengage Learning.\nAvailable in the Department‚Äôs library.\n\n\n\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "Database Management - Introduction",
    "section": "",
    "text": "‚ÄúAll the value of this company is in its people. If you burned down all our plants, and we just kept our people and our information files, we should soon be as strong as ever.‚Äù\n\n\n\n\n\nThomas Watson Jr, 2nd President of IBM\n\n\n\n\n\n\n\n\n\n\n\n‚ÄúThe most meaningful way to differentiate your company from your competitors, the best way to put distance between you and the crowd, is to do an outstanding job with information. How you can gather,manage and use information will determine whether you win or lose‚Äù\n\n\n\n\n\nBill Gates, Founder of Microsoft\n\n\n\n\n\nThe two quotes above show us a very important truth about managing organization. In the Information society, which is based on innovation, knowledge and services, the key determinant of success has shifted from product quality to decision quality. In the traditional industrial society, the better quality product you had, the better market position you had (which is still very true in some cases). Nowadays, Companies are very dependent on information systems to create value for their customers. In other words, the better information you have, the better is your position.\nIf you are not convinced, think about your own private life. In today‚Äôs fast-paced world, managing personal information effectively is essential. Tools like calendars and address books serve as crucial external memory systems, helping us stay organized and on top of our daily tasks.\n\n\n\n\n\n\nA calendar not only helps us track appointments, meetings, and deadlines but also organizes time in a structured way, often with features to quickly navigate to today‚Äôs date or upcoming events.\n\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, address books store important contact details, such as phone numbers and email addresses, allowing for easy access to frequently contacted individuals.\n\n\n\n\n\n\nBoth systems are designed to reduce the mental burden of remembering every detail, providing an efficient means of storing and retrieving information, thus enabling us to focus on more important tasks.\nThere are some common features of all these systems:\n\nStorage medium\n\nElectronic / paper\n\nStructure for storing data\nData is organized for:\n\nEfficient data entry\nRapid data retrieval\n\nAny design requires trade-offs\n\n\n\nOrganizations, like people, need to remember many things. Deciding where and how to store data frequently involves a trade-off.\nOrganizational data are used by a variety of information systems.\n\n\n\nA simple Informaion Sysem\n\n\nThere are many types of Information Systems in organizations.\n\n\n\n\n\n\n\nType of IS\nSystem‚Äôs purpose\n\n\n\n\nTPS\nTransaction processing system: Collects and stores data from routine transactions\n\n\nMIS\nManagement information system: Converts data from a TPS into information for planning, controlling, and managing an organization\n\n\nDSS\nDecision support system: Supports managerial decision making by providing models for processing and analysing data\n\n\nEIS\nExecutive information system: Provides senior management with information necessary to monitor organizational performance, and develop and implement strategies\n\n\nOLAP\nOnline analytical processing: Presents a multidimensional, logical view of data\n\n\nData mining\nUses statistical analysis and artificial intelligence techniques to identify hidden relationships in data\n\n\nBI\nBusiness intelligence: Systems for gathering, storing, analyzing, and accessing data to improve decision-making\n\n\n\nAll of them may require some sort of data to work.\n\n\n\nThe IS cycle\n\n\n\n\nFor the data to be effectively fed into all these systems, data management systems must meet specific requirements:\n\n\n\n\n\n\n\nRequirement\nDescription\n\n\n\n\nShareable\nReadily accessible to multiple users (at the same time).\n\n\nTransportable\nEasily accessible by users in different locations (e.g., salesperson, decision-maker).\n\n\nSecure\nSafe from destruction or unauthorized use.\n\n\nAccurate\nReliable and trustworthy.\n\n\nTimely\nCurrent and up-to-date.\n\n\nRelevant\nValuable and appropriate for its intended use.\n\n\n\n\n\n\n\nSimilarly, there are challenges and problems that database management systems must overcome:\n\n\n\n\n\n\n\nChallenge\nDescription\n\n\n\n\nRedundancy\nThe same data is replicated in multiple locations.\n\n\nLack of Data Control\nData is not secure or effectively organized and managed.\n\n\nPoor Interface\nData is not accessible.\n\n\nDelays\nData is not timely.\n\n\nLack of Reality\nData is not relevant because it lacks fidelity to the real world it represents.\n\n\nLack of Data Integration\nRelated data is stored in separate, isolated locations."
  },
  {
    "objectID": "Introduction.html#managin-data",
    "href": "Introduction.html#managin-data",
    "title": "Database Management - Introduction",
    "section": "",
    "text": "¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Introduction.html#managing-data",
    "href": "Introduction.html#managing-data",
    "title": "Database Management - Introduction",
    "section": "",
    "text": "‚ÄúAll the value of this company is in its people. If you burned down all our plants, and we just kept our people and our information files, we should soon be as strong as ever.‚Äù\n\n\n\n\n\nThomas Watson Jr, 2nd President of IBM\n\n\n\n\n\n\n\n\n\n\n\n‚ÄúThe most meaningful way to differentiate your company from your competitors, the best way to put distance between you and the crowd, is to do an outstanding job with information. How you can gather,manage and use information will determine whether you win or lose‚Äù\n\n\n\n\n\nBill Gates, Founder of Microsoft\n\n\n\n\n\nThe two quotes above show us a very important truth about managing organization. In the Information society, which is based on innovation, knowledge and services, the key determinant of success has shifted from product quality to decision quality. In the traditional industrial society, the better quality product you had, the better market position you had (which is still very true in some cases). Nowadays, Companies are very dependent on information systems to create value for their customers. In other words, the better information you have, the better is your position.\nIf you are not convinced, think about your own private life. In today‚Äôs fast-paced world, managing personal information effectively is essential. Tools like calendars and address books serve as crucial external memory systems, helping us stay organized and on top of our daily tasks.\n\n\n\n\n\n\nA calendar not only helps us track appointments, meetings, and deadlines but also organizes time in a structured way, often with features to quickly navigate to today‚Äôs date or upcoming events.\n\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, address books store important contact details, such as phone numbers and email addresses, allowing for easy access to frequently contacted individuals.\n\n\n\n\n\n\nBoth systems are designed to reduce the mental burden of remembering every detail, providing an efficient means of storing and retrieving information, thus enabling us to focus on more important tasks.\nThere are some common features of all these systems:\n\nStorage medium\n\nElectronic / paper\n\nStructure for storing data\nData is organized for:\n\nEfficient data entry\nRapid data retrieval\n\nAny design requires trade-offs"
  },
  {
    "objectID": "Introduction.html#organizational-data-management",
    "href": "Introduction.html#organizational-data-management",
    "title": "Database Management - Introduction",
    "section": "",
    "text": "Organizations, like people, need to remember many things. Deciding where and how to store data frequently involves a trade-off.\nOrganizational data are used by a variety of information systems.\n\n\n\nA simple Informaion Sysem\n\n\nThere are many types of Information Systems in organizations.\n\n\n\n\n\n\n\nType of IS\nSystem‚Äôs purpose\n\n\n\n\nTPS\nTransaction processing system: Collects and stores data from routine transactions\n\n\nMIS\nManagement information system: Converts data from a TPS into information for planning, controlling, and managing an organization\n\n\nDSS\nDecision support system: Supports managerial decision making by providing models for processing and analysing data\n\n\nEIS\nExecutive information system: Provides senior management with information necessary to monitor organizational performance, and develop and implement strategies\n\n\nOLAP\nOnline analytical processing: Presents a multidimensional, logical view of data\n\n\nData mining\nUses statistical analysis and artificial intelligence techniques to identify hidden relationships in data\n\n\nBI\nBusiness intelligence: Systems for gathering, storing, analyzing, and accessing data to improve decision-making\n\n\n\nAll of them may require some sort of data to work.\n\n\n\nThe IS cycle\n\n\n\n\nFor the data to be effectively fed into all these systems, data management systems must meet specific requirements:\n\n\n\n\n\n\n\nRequirement\nDescription\n\n\n\n\nShareable\nReadily accessible to multiple users (at the same time).\n\n\nTransportable\nEasily accessible by users in different locations (e.g., salesperson, decision-maker).\n\n\nSecure\nSafe from destruction or unauthorized use.\n\n\nAccurate\nReliable and trustworthy.\n\n\nTimely\nCurrent and up-to-date.\n\n\nRelevant\nValuable and appropriate for its intended use.\n\n\n\n\n\n\n\nSimilarly, there are challenges and problems that database management systems must overcome:\n\n\n\n\n\n\n\nChallenge\nDescription\n\n\n\n\nRedundancy\nThe same data is replicated in multiple locations.\n\n\nLack of Data Control\nData is not secure or effectively organized and managed.\n\n\nPoor Interface\nData is not accessible.\n\n\nDelays\nData is not timely.\n\n\nLack of Reality\nData is not relevant because it lacks fidelity to the real world it represents.\n\n\nLack of Data Integration\nRelated data is stored in separate, isolated locations."
  },
  {
    "objectID": "Introduction.html#databases-and-database-design",
    "href": "Introduction.html#databases-and-database-design",
    "title": "Database Management - Introduction",
    "section": "Databases and Database Design",
    "text": "Databases and Database Design\n\nData vs.¬†Information\nBefore diving into databases, it‚Äôs crucial to grasp the distinction between data, information, and knowledge. Databases don‚Äôt just store raw data ‚Äì they organize it into meaningful information that can be analyzed to generate knowledge.\nData consists of raw facts and figures without context, like individual numbers or words. Information emerges when data is organized and given context, making it meaningful and useful ‚Äì for instance, when those numbers represent monthly sales figures. Knowledge goes further: it‚Äôs the understanding gained from analyzing and applying information, allowing us to make informed decisions and recognize patterns.\n\n\n\n\n\n\n\n\nCategory\nCharacteristics\nExample\n\n\n\n\nData\n‚Ä¢ Raw facts‚Ä¢ No context‚Ä¢ Just numbers and text\nTemperature readings: 23, 25, 22, 24, 26\n\n\nInformation\n‚Ä¢ Data with context‚Ä¢ Processed data‚Ä¢ Value added to data‚Ä¢ Summarized‚Ä¢ Organized‚Ä¢ Analyzed\nDaily temperature readings in Celsius for Pavia, week of June 1-5, 2024, showing an average of 24¬∞C with an upward trend\n\n\nKnowledge\n‚Ä¢ Knowing what information is required‚Ä¢ Knowing what the information means\nUnderstanding that the rising temperature trend in Pavia indicates the start of summer and knowing to adjust city services (like water supply) and public health advisories accordingly\n\n\n\nA database‚Äôs true value lies in its ability to transform raw data into actionable insights through structured organization and relationships.\n\n\nDatabase\nA database is an organized collection of related files used to store and manage data efficiently. It serves as a single logical data repository, ensuring that data is structured, accessible, and self-describing. Databases contain both user data (actual stored information) and metadata (data about the data, such as structure and relationships).\nIn a relational database, data is organized into tables, where each row (record) represents a unit of interest, and each column (field) defines an attribute of that unit.\nThere are different types of databases based on usage and architecture:\n\nTypes of Databases Explained\n\n1. Single-User vs.¬†Multi-User Databases\n\nSingle-User Database: Designed for one user at a time, typically used in personal applications or small-scale projects (e.g., Microsoft Access, SQLite).\n\nMulti-User Database: Supports multiple users accessing and modifying data simultaneously, often used in businesses and enterprise systems (e.g., MySQL, PostgreSQL).\n\n\n\n2. Operational (Transactional) vs.¬†Analytical Databases\n\nOperational (Transactional) Database: Used for real-time operations, such as processing daily business transactions (e.g., banking systems, e-commerce platforms). These databases are optimized for fast inserts, updates, and deletes.\n\nAnalytical Database: Designed for reporting and decision-making, optimized for complex queries and data analysis rather than frequent transactions (e.g., data warehouses like Amazon Redshift or Google BigQuery).\n\n\n\n3. Centralized, Distributed, or Cloud Databases\n\nCentralized Database: All data is stored in a single location, often on a dedicated server. This setup simplifies management but can become a bottleneck as data scales.\n\nDistributed Database: Data is spread across multiple locations or servers, improving performance and reliability (e.g., Google Spanner, Apache Cassandra).\n\nCloud Database: Hosted on cloud platforms, allowing for scalable, flexible, and remotely accessible data storage (e.g., AWS RDS, Google Cloud SQL).\n\n\n\n4. Single-Tenant vs.¬†Multi-Tenant Databases\n\nSingle-Tenant Database: Each customer (tenant) has their own dedicated database. This provides better security and customization but can be expensive (e.g., private database instances for enterprises).\n\nMulti-Tenant Database: A single database serves multiple customers, with data logically separated. This is commonly used in SaaS (Software as a Service) applications (e.g., Salesforce, Shopify).\n\n\n\n5. Relational vs.¬†Non-Relational Databases\n\nRelational Database (RDBMS): Uses structured tables with predefined relationships and follows SQL for querying (e.g., MySQL, PostgreSQL, Oracle). Best for structured, consistent data.\n\nNon-Relational Database (NoSQL): Stores data in flexible formats like key-value pairs, documents, graphs, or columns (e.g., MongoDB, Redis, Cassandra). Ideal for big data, real-time applications, and unstructured data.\n\nEach database type is suited for different use cases depending on the scale, structure, and nature of the data being managed.\n\n\n\n\nDatabase Model\nDatabase Model is the logical representation of the structure of the data.\n\n\n\nDatabase Model Example\n\n\nData Modelling\n\nThe technique for creating the logical structure of a database\n\nWhat files (tables) should be in the database?\nHow are these files related?\nWhat columns should describe each row in a table?\n\nData Modeling is an iterative process\nData Modeling is a communication tool\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is a design process\n\n\nDESIGN The specification of an object, intended to accomplish goals, in a particular environment, using a set of primitive components, satisfying a set of requirements, subject to constraints.\n\n\n\nDifferent requirements = different design\n\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is an iterative process\n\n\n\n\n\n\n\n\nData modeling is a highly repetitive and cyclical process, requiring continuous refinement and improvement at every stage. It begins with an initial conceptual model, which is repeatedly reviewed, adjusted, and expanded based on new insights, stakeholder feedback, and evolving business needs. Each iteration involves revisiting assumptions, restructuring relationships, and optimizing performance to ensure the model remains accurate and efficient. As data requirements change, the process loops back, refining previous versions and incorporating necessary modifications. This ongoing cycle of evaluation and enhancement ensures that the final data model is robust, scalable, and aligned with organizational goals.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is a communication process\n\n\nIt serves as a bridge between technical teams, business stakeholders, and end users. It translates complex data structures into understandable diagrams and definitions, ensuring that everyone involved has a clear understanding of how data is organized, stored, and utilized. Effective data modeling requires collaboration, as stakeholders provide input on business rules and requirements while data architects translate these needs into structured models. This shared understanding helps prevent misinterpretations, aligns expectations, and ensures that the final database or system supports business objectives efficiently."
  },
  {
    "objectID": "Introduction.html#wait-why-bother",
    "href": "Introduction.html#wait-why-bother",
    "title": "Database Management - Introduction",
    "section": "WAIT! WHY BOTHER?",
    "text": "WAIT! WHY BOTHER?\n\n\n\n\n\n\n\n\n\n\nWhy don‚Äôt we just use Excel like everyone else???\n\n\n\n\n\n\n\n\n\n\nWhile Excel is a powerful tool for organizing and analyzing data, it is not designed for managing large-scale, complex datasets that require consistency, security, and efficient querying. Databases offer structured storage, ensuring data integrity through constraints, relationships, and normalization, which Excel lacks. Additionally, databases handle concurrent access, scalability, automation, and advanced querying via SQL, making them the superior choice for robust and reliable data management.l\n\n\n\n\n\nBad things can happen, when you use Excel to store your data üò¢\n\n\n\n\n\nOne major issue with using Excel for data management is the risk of anomalies‚Äîproblems that arise due to poorly structured data.\n\n\n\n\n\n\nWarning\n\n\n\nAnomalies are problems that occur in a poorly designed database when inserting, updating, or deleting data. They happen because data is not organized properly, leading to inconsistencies, duplication, or unintended data loss.\n\n\nLet‚Äôs consider this table. It contains stock market data that is used by an investment firm dealing with international commodities and agricultural products. Think about the problems we may have with it\n\n\n\n\n\n\n\nStock market data\n\n\n\n\n\n\n\n\nWarning\n\n\n\nInsertion anomalies occur when adding new data is difficult due to missing dependencies.\n\n\nFor example n our table you cannot add a new nation exchange rate without creating a (fake) stock\n\n\n\n\n\n\nWarning\n\n\n\nUpdate anomalies lead to inconsistencies when changes must be made in multiple places.\n\n\nWhen the exchange rate in the UK changes you must update the rows for 10 shares. Likely to generate errors and/or inconsistencies\n\n\n\n\n\n\nWarning\n\n\n\nDeletion anomalies cause unintended data loss when removing a record also removes critical information.\n\n\nFor example, if you sell ‚ÄúBombay Duck‚Äù you lose information about the Indian exchange rate.\nUnlike Excel, databases prevent these anomalies through normalization, ensuring data is stored efficiently and consistently."
  },
  {
    "objectID": "Introduction.html#database-management-systems",
    "href": "Introduction.html#database-management-systems",
    "title": "Database Management - Introduction",
    "section": "Database Management Systems",
    "text": "Database Management Systems\n\n\n\n\n\n\nNote\n\n\n\nA Database Management System (DBMS) is software that allows users to create, store, manage, and retrieve data efficiently.\n\n\n\n\n\n\n\n\n\nDatabase Management System (Icons created by Ranah Pixel Studio, Freepik, Pixel perfect, and xnimrodx - Flaticon)\n\n\nA Database Management System (DBMS) is essential for businesses as it reduces data inconsistency, ensuring that the same information does not appear differently across multiple locations. A DBMS also improves data sharing, security, and access, allowing authorized users to retrieve and update data seamlessly. This leads to better decision-making as businesses can rely on accurate and up-to-date information. Additionally, it enhances end-user productivity by streamlining workflows and reducing errors.\nExamples of DBMS include MySQL, PostgreSQL, Oracle, and Microsoft SQL Server.\nOverall, a DBMS provides better data integration, making business operations more efficient and reliable.\n\nDBMS Functions:\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nData dictionary management\nStores definitions of the data elements and their relationships\n\n\nData storage management\nPerformance tuning: Ensures efficient performance of the database in terms of storage and access speed\n\n\nData transformation and presentation\nTransforms entered data to conform to required data structures\n\n\nSecurity management\nEnforces user security and data privacy\n\n\nMultiuser access control\nSophisticated algorithms ensure that multiple users can access the database concurrently without compromising its integrity\n\n\nBackup and recovery management\nEnables recovery of the database after a failure\n\n\nData integrity management\nMinimizes redundancy and maximizes consistency\n\n\nDatabase access languages and application programming interfaces\n- Query language: Lets the user specify what must be done without having to specify how- Structured Query Language (SQL): De facto query language and data access standard supported by the majority of DBMS vendors\n\n\nDatabase communication interfaces\nAccept end-user requests via multiple, different network environments\n\n\n\n\n\n\nImages and GIFs Disclaimer: Some of the images and GIFs used on this website are not owned by me. They are used for educational and illustrative purposes only. All rights belong to their respective owners. If you believe any content violates copyright, please contact me for prompt removal.\n\n\n\n\n\n\n  \n  \n    ¬© 2025. All Rights Reserved.\n  \n  \n\n  \n  \n    Enabled by Dr. Marcin Bartosiak"
  },
  {
    "objectID": "Introduction.html#types-of-databases-explained",
    "href": "Introduction.html#types-of-databases-explained",
    "title": "Database Management - Introduction",
    "section": "Types of Databases Explained",
    "text": "Types of Databases Explained\n\n1. Single-User vs.¬†Multi-User Databases\n\nSingle-User Database: Designed for one user at a time, typically used in personal applications or small-scale projects (e.g., Microsoft Access, SQLite).\n\nMulti-User Database: Supports multiple users accessing and modifying data simultaneously, often used in businesses and enterprise systems (e.g., MySQL, PostgreSQL).\n\n\n\n2. Operational (Transactional) vs.¬†Analytical Databases\n\nOperational (Transactional) Database: Used for real-time operations, such as processing daily business transactions (e.g., banking systems, e-commerce platforms). These databases are optimized for fast inserts, updates, and deletes.\n\nAnalytical Database: Designed for reporting and decision-making, optimized for complex queries and data analysis rather than frequent transactions (e.g., data warehouses like Amazon Redshift or Google BigQuery).\n\n\n\n3. Centralized, Distributed, or Cloud Databases\n\nCentralized Database: All data is stored in a single location, often on a dedicated server. This setup simplifies management but can become a bottleneck as data scales.\n\nDistributed Database: Data is spread across multiple locations or servers, improving performance and reliability (e.g., Google Spanner, Apache Cassandra).\n\nCloud Database: Hosted on cloud platforms, allowing for scalable, flexible, and remotely accessible data storage (e.g., AWS RDS, Google Cloud SQL).\n\n\n\n4. Single-Tenant vs.¬†Multi-Tenant Databases\n\nSingle-Tenant Database: Each customer (tenant) has their own dedicated database. This provides better security and customization but can be expensive (e.g., private database instances for enterprises).\n\nMulti-Tenant Database: A single database serves multiple customers, with data logically separated. This is commonly used in SaaS (Software as a Service) applications (e.g., Salesforce, Shopify).\n\n\n\n5. Relational vs.¬†Non-Relational Databases\n\nRelational Database (RDBMS): Uses structured tables with predefined relationships and follows SQL for querying (e.g., MySQL, PostgreSQL, Oracle). Best for structured, consistent data.\n\nNon-Relational Database (NoSQL): Stores data in flexible formats like key-value pairs, documents, graphs, or columns (e.g., MongoDB, Redis, Cassandra). Ideal for big data, real-time applications, and unstructured data.\n\nEach database type is suited for different use cases depending on the scale, structure, and nature of the data being managed.\n\n\nDatabase Model\nDatabase Model is the logical representation of the structure of the data.\n\n\n\nDatabase Model Example\n\n\nData Modelling\n\nThe technique for creating the logical structure of a database\n\nWhat files (tables) should be in the database?\nHow are these files related?\nWhat columns should describe each row in a table?\n\nData Modeling is an iterative process\nData Modeling is a communication tool\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is a design process\n\n\nDESIGN The specification of an object, intended to accomplish goals, in a particular environment, using a set of primitive components, satisfying a set of requirements, subject to constraints.\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is an iterative process\n\n\n\n\n\n\n\n\nData modeling is a highly repetitive and cyclical process, requiring continuous refinement and improvement at every stage. It begins with an initial conceptual model, which is repeatedly reviewed, adjusted, and expanded based on new insights, stakeholder feedback, and evolving business needs. Each iteration involves revisiting assumptions, restructuring relationships, and optimizing performance to ensure the model remains accurate and efficient. As data requirements change, the process loops back, refining previous versions and incorporating necessary modifications. This ongoing cycle of evaluation and enhancement ensures that the final data model is robust, scalable, and aligned with organizational goals.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is a communication process\n\n\nIt serves as a bridge between technical teams, business stakeholders, and end users. It translates complex data structures into understandable diagrams and definitions, ensuring that everyone involved has a clear understanding of how data is organized, stored, and utilized. Effective data modeling requires collaboration, as stakeholders provide input on business rules and requirements while data architects translate these needs into structured models. This shared understanding helps prevent misinterpretations, aligns expectations, and ensures that the final database or system supports business objectives efficiently."
  },
  {
    "objectID": "Introduction.html#data-vs.-information",
    "href": "Introduction.html#data-vs.-information",
    "title": "Database Management - Introduction",
    "section": "Data vs.¬†Information",
    "text": "Data vs.¬†Information\nBefore diving into databases, it‚Äôs crucial to grasp the distinction between data, information, and knowledge. Databases don‚Äôt just store raw data ‚Äì they organize it into meaningful information that can be analyzed to generate knowledge.\nData consists of raw facts and figures without context, like individual numbers or words. Information emerges when data is organized and given context, making it meaningful and useful ‚Äì for instance, when those numbers represent monthly sales figures. Knowledge goes further: it‚Äôs the understanding gained from analyzing and applying information, allowing us to make informed decisions and recognize patterns.\n\n\n\n\n\n\n\n\nCategory\nCharacteristics\nExample\n\n\n\n\nData\n‚Ä¢ Raw facts‚Ä¢ No context‚Ä¢ Just numbers and text\nTemperature readings: 23, 25, 22, 24, 26\n\n\nInformation\n‚Ä¢ Data with context‚Ä¢ Processed data‚Ä¢ Value added to data‚Ä¢ Summarized‚Ä¢ Organized‚Ä¢ Analyzed\nDaily temperature readings in Celsius for Pavia, week of June 1-5, 2024, showing an average of 24¬∞C with an upward trend\n\n\nKnowledge\n‚Ä¢ Knowing what information is required‚Ä¢ Knowing what the information means\nUnderstanding that the rising temperature trend in Pavia indicates the start of summer and knowing to adjust city services (like water supply) and public health advisories accordingly\n\n\n\nA database‚Äôs true value lies in its ability to transform raw data into actionable insights through structured organization and relationships."
  },
  {
    "objectID": "Introduction.html#database",
    "href": "Introduction.html#database",
    "title": "Database Management - Introduction",
    "section": "Database",
    "text": "Database\nA database is an organized collection of related files used to store and manage data efficiently. It serves as a single logical data repository, ensuring that data is structured, accessible, and self-describing. Databases contain both user data (actual stored information) and metadata (data about the data, such as structure and relationships).\nIn a relational database, data is organized into tables, where each row (record) represents a unit of interest, and each column (field) defines an attribute of that unit.\nThere are different types of databases based on usage and architecture:\n\nTypes of Databases Explained\n\n1. Single-User vs.¬†Multi-User Databases\n\nSingle-User Database: Designed for one user at a time, typically used in personal applications or small-scale projects (e.g., Microsoft Access, SQLite).\n\nMulti-User Database: Supports multiple users accessing and modifying data simultaneously, often used in businesses and enterprise systems (e.g., MySQL, PostgreSQL).\n\n\n\n2. Operational (Transactional) vs.¬†Analytical Databases\n\nOperational (Transactional) Database: Used for real-time operations, such as processing daily business transactions (e.g., banking systems, e-commerce platforms). These databases are optimized for fast inserts, updates, and deletes.\n\nAnalytical Database: Designed for reporting and decision-making, optimized for complex queries and data analysis rather than frequent transactions (e.g., data warehouses like Amazon Redshift or Google BigQuery).\n\n\n\n3. Centralized, Distributed, or Cloud Databases\n\nCentralized Database: All data is stored in a single location, often on a dedicated server. This setup simplifies management but can become a bottleneck as data scales.\n\nDistributed Database: Data is spread across multiple locations or servers, improving performance and reliability (e.g., Google Spanner, Apache Cassandra).\n\nCloud Database: Hosted on cloud platforms, allowing for scalable, flexible, and remotely accessible data storage (e.g., AWS RDS, Google Cloud SQL).\n\n\n\n4. Single-Tenant vs.¬†Multi-Tenant Databases\n\nSingle-Tenant Database: Each customer (tenant) has their own dedicated database. This provides better security and customization but can be expensive (e.g., private database instances for enterprises).\n\nMulti-Tenant Database: A single database serves multiple customers, with data logically separated. This is commonly used in SaaS (Software as a Service) applications (e.g., Salesforce, Shopify).\n\n\n\n5. Relational vs.¬†Non-Relational Databases\n\nRelational Database (RDBMS): Uses structured tables with predefined relationships and follows SQL for querying (e.g., MySQL, PostgreSQL, Oracle). Best for structured, consistent data.\n\nNon-Relational Database (NoSQL): Stores data in flexible formats like key-value pairs, documents, graphs, or columns (e.g., MongoDB, Redis, Cassandra). Ideal for big data, real-time applications, and unstructured data.\n\nEach database type is suited for different use cases depending on the scale, structure, and nature of the data being managed."
  },
  {
    "objectID": "Introduction.html#database-model",
    "href": "Introduction.html#database-model",
    "title": "Database Management - Introduction",
    "section": "Database Model",
    "text": "Database Model\nDatabase Model is the logical representation of the structure of the data.\n\n\n\nDatabase Model Example\n\n\nData Modelling\n\nThe technique for creating the logical structure of a database\n\nWhat files (tables) should be in the database?\nHow are these files related?\nWhat columns should describe each row in a table?\n\nData Modeling is an iterative process\nData Modeling is a communication tool\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is a design process\n\n\nDESIGN: the specification of an object, intended to accomplish goals, in a particular environment, using a set of primitive components, satisfying a set of requirements, subject to constraints.\n\n\n\nDifferent requirements = different design\n\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is an iterative process\n\n\n\n\n\n\n\n\nData modeling is a highly repetitive and cyclical process, requiring continuous refinement and improvement at every stage. It begins with an initial conceptual model, which is repeatedly reviewed, adjusted, and expanded based on new insights, stakeholder feedback, and evolving business needs. Each iteration involves revisiting assumptions, restructuring relationships, and optimizing performance to ensure the model remains accurate and efficient. As data requirements change, the process loops back, refining previous versions and incorporating necessary modifications. This ongoing cycle of evaluation and enhancement ensures that the final data model is robust, scalable, and aligned with organizational goals.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nData Modelling is a communication process\n\n\nIt serves as a bridge between technical teams, business stakeholders, and end users. It translates complex data structures into understandable diagrams and definitions, ensuring that everyone involved has a clear understanding of how data is organized, stored, and utilized. Effective data modeling requires collaboration, as stakeholders provide input on business rules and requirements while data architects translate these needs into structured models. This shared understanding helps prevent misinterpretations, aligns expectations, and ensures that the final database or system supports business objectives efficiently."
  }
]